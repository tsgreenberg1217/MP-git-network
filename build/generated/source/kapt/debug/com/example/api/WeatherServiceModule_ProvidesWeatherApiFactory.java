// Generated by Dagger (https://dagger.dev).
package com.example.api;

import com.google.gson.Gson;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class WeatherServiceModule_ProvidesWeatherApiFactory implements Factory<Retrofit.Builder> {
  private final Provider<Gson> gsonProvider;

  private final Provider<OkHttpClient> clientProvider;

  public WeatherServiceModule_ProvidesWeatherApiFactory(Provider<Gson> gsonProvider,
      Provider<OkHttpClient> clientProvider) {
    this.gsonProvider = gsonProvider;
    this.clientProvider = clientProvider;
  }

  @Override
  public Retrofit.Builder get() {
    return providesWeatherApi(gsonProvider.get(), clientProvider.get());
  }

  public static WeatherServiceModule_ProvidesWeatherApiFactory create(Provider<Gson> gsonProvider,
      Provider<OkHttpClient> clientProvider) {
    return new WeatherServiceModule_ProvidesWeatherApiFactory(gsonProvider, clientProvider);
  }

  public static Retrofit.Builder providesWeatherApi(Gson gson, OkHttpClient client) {
    return Preconditions.checkNotNullFromProvides(WeatherServiceModule.INSTANCE.providesWeatherApi(gson, client));
  }
}
